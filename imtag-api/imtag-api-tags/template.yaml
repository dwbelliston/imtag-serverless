AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  imtag-api-tags

Globals:
  Function:
    Timeout: 60

Parameters:
  Env:
    Description: "Required. The env"
    Type: "String"

  UseParameterStore:
    Description: "Required. Use param store to pull db credentials"
    Type: "String"

  DatabaseUsername:
    Description: "Required. The Database username"
    Type: "String"

  DatabasePassword:
    Description: "Required. The Database password"
    Type: "String"

  DatabaseHostname:
    Description: "Required. The Database hostname"
    Type: "String"

  DatabaseName:
    Description: "Required. The Database name"
    Type: "String"

Resources:
  # ImtagDBLambdaLayerTag:
  #   Type: AWS::Serverless::LayerVersion
  #   Properties:
  #     LayerName: ImtagDBLambdaLayerTag
  #     Description: Provides db connection functionality
  #     ContentUri: s3://1s-lambda-layer-pymysql/lambda-layer-pymysql.zip
  #     CompatibleRuntimes:
  #       - python3.7
  #     RetentionPolicy: Retain

  ImtagTagsGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: tags/
      Handler: app.get_handler
      Runtime: python3.7
      Events:
        GetTagsEvent:
          Type: Api
          Properties:
            Path: /tags
            Method: GET
      Layers:
        - arn:aws:lambda:us-east-1:842337631775:layer:LambdaLayerPymysql:3
      VpcConfig:
        SecurityGroupIds:
          - sg-076c10e0a8f259412
        SubnetIds:
          - subnet-0e0722379640918ee
          - subnet-05d52ebdb148879b6
          - subnet-05dc1181f57a3af42
      Environment:
        Variables:
          ENV: !Ref Env
          DB_USER: !Ref DatabaseUsername
          DB_PASSWORD: !Ref DatabasePassword
          DB_HOSTNAME: !Ref DatabaseHostname
          DB_NAME: !Ref DatabaseName
          USE_PARAMETER_STORE: !Ref UseParameterStore

  ImtagTagsPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: tags/
      Handler: app.post_handler
      Runtime: python3.7
      Events:
        GetTagsEvent:
          Type: Api
          Properties:
            Path: /tags
            Method: POST
      Layers:
        - arn:aws:lambda:us-east-1:842337631775:layer:LambdaLayerPymysql:3
      VpcConfig:
        SecurityGroupIds:
          - sg-076c10e0a8f259412
        SubnetIds:
          - subnet-0e0722379640918ee
          - subnet-05d52ebdb148879b6
          - subnet-05dc1181f57a3af42
      Environment:
        Variables:
          ENV: !Ref Env
          DB_USER: !Ref DatabaseUsername
          DB_PASSWORD: !Ref DatabasePassword
          DB_HOSTNAME: !Ref DatabaseHostname
          DB_NAME: !Ref DatabaseName
          USE_PARAMETER_STORE: !Ref UseParameterStore

Outputs:
  ImtagTagsApi:
    Description: "API Gateway endpoint URL for Prod stage for Imtag Api Tags function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/tags/"
  ImtagTagsGetFunction:
    Description: "Imtag Get Tags Lambda Function ARN"
    Value: !GetAtt ImtagTagsGetFunction.Arn
  ImtagTagsGetIamRole:
    Description: "Implicit IAM Role created for Imtag Tags function"
    Value: !GetAtt ImtagTagsGetFunctionRole.Arn
  ImtagTagsPostFunction:
    Description: "Imtag Post Tag Lambda Function ARN"
    Value: !GetAtt ImtagTagsPostFunction.Arn
  ImtagTagsPostIamRole:
    Description: "Implicit IAM Role created for Imtag Tags function"
    Value: !GetAtt ImtagTagsPostFunctionRole.Arn
